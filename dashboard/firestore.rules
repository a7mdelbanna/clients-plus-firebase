rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function hasCompanyId() {
      return isAuthenticated() && 
        (request.auth.token.companyId != null || (userExists(request.auth.uid) && getUserData().companyId != null));
    }
    
    function getUserCompanyId() {
      return request.auth.token.get('companyId', userExists(request.auth.uid) ? getUserData().get('companyId', null) : null);
    }
    
    function belongsToCompany(companyId) {
      return isAuthenticated() && getUserCompanyId() == companyId;
    }
    
    function isCompanyAdmin(companyId) {
      return belongsToCompany(companyId) && 
        request.auth.token.get('role', 'USER') == 'ADMIN';
    }
    
    // Global users collection - for user lookup and company assignment
    match /users/{userId} {
      // Users can read their own document
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can create their own document with minimal required fields
      // Allow creation even if user already has companyId in claims
      allow create: if isAuthenticated() && 
        request.auth.uid == userId &&
        request.resource.data.id == userId &&
        request.resource.data.email != null &&
        // Allow companyId if it matches user's claims
        (request.resource.data.companyId == null || 
         request.resource.data.companyId == request.auth.token.get('companyId', null));
      
      // Users can update their own document
      // Prevent changing companyId unless it matches claims
      allow update: if isAuthenticated() && 
        request.auth.uid == userId &&
        // If companyId is being changed, it must match claims
        (!request.resource.data.keys().hasAll(['companyId']) ||
         request.resource.data.companyId == request.auth.token.get('companyId', null) ||
         request.resource.data.companyId == resource.data.companyId);
      
      // Don't allow deletion
      allow delete: if false;
    }
    
    // Companies collection
    match /companies/{companyId} {
      // Allow authenticated users to create companies if they are the owner
      // This is specifically for the signup flow where users don't have companyId yet
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid &&
        request.resource.data.active == true &&
        request.resource.data.id == companyId;
      
      // Allow reading company if user belongs to it OR if they are the owner (for setup flow)
      allow read: if belongsToCompany(companyId) || 
        (isAuthenticated() && resource.data.ownerId == request.auth.uid);
      
      // Allow updating company if user is admin OR if they are the owner
      // Note: During setup, the user might not have companyId in claims yet
      allow update: if isCompanyAdmin(companyId) || 
        (isAuthenticated() && resource.data.ownerId == request.auth.uid) ||
        (belongsToCompany(companyId) && request.auth.token.get('role', 'USER') == 'ADMIN');
      
      // Don't allow deletion
      allow delete: if false;
      
      // Company subcollections
      match /users/{userId} {
        // Allow creation during company setup (when user is the owner)
        allow create: if isAuthenticated() && 
          (request.auth.uid == get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId ||
           request.auth.uid == userId);
        
        // Company admins can manage users
        allow read, update, delete: if isCompanyAdmin(companyId);
        
        // Users can read their own profile in the company
        allow read: if isAuthenticated() && request.auth.uid == userId;
      }
      
      match /branches/{branchId} {
        // Users in company can read branches
        allow read: if belongsToCompany(companyId) || 
          (isAuthenticated() && get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid);
        
        // Allow creation during setup by owner, or management by admins
        allow create: if isAuthenticated() && 
          get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
        allow update, delete: if isCompanyAdmin(companyId);
      }
      
      match /locations/{locationId} {
        // Users in company can read locations
        allow read: if belongsToCompany(companyId) || 
          (isAuthenticated() && get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid);
        
        // Allow creation during setup by owner, or management by admins
        allow create: if isAuthenticated() && 
          get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
        allow update, delete: if isCompanyAdmin(companyId);
      }
      
      match /setupProgress/{document} {
        // Allow users to read/write their setup progress
        allow read, write: if belongsToCompany(companyId);
      }
      
      // Other company subcollections
      match /{subcollection}/{document} {
        // Default: users in company can read
        allow read: if belongsToCompany(companyId);
        
        // Only admins can write
        allow write: if isCompanyAdmin(companyId);
      }
    }
    
    // Clients collection - company-wide resource
    match /clients/{clientId} {
      // Users in the company can read clients
      allow read: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId);
      
      // Only users in the company can create clients
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time;
      
      // Users in the company can update their clients
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId && // Can't change company
        request.resource.data.updatedAt == request.time;
      
      // Only admins can delete clients
      allow delete: if isAuthenticated() && 
        isCompanyAdmin(resource.data.companyId);
        
      // Client subcollections
      match /contacts/{contactId} {
        allow read: if isAuthenticated() && 
          belongsToCompany(get(/databases/$(database)/documents/clients/$(clientId)).data.companyId);
        allow write: if isAuthenticated() && 
          belongsToCompany(get(/databases/$(database)/documents/clients/$(clientId)).data.companyId);
      }
      
      match /notes/{noteId} {
        allow read: if isAuthenticated() && 
          belongsToCompany(get(/databases/$(database)/documents/clients/$(clientId)).data.companyId);
        allow write: if isAuthenticated() && 
          belongsToCompany(get(/databases/$(database)/documents/clients/$(clientId)).data.companyId);
      }
    }
    
    // Projects collection - company-wide resource
    match /projects/{projectId} {
      allow read: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId);
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        isCompanyAdmin(resource.data.companyId);
    }
    
    // Invoices collection - company-wide resource  
    match /invoices/{invoiceId} {
      allow read: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId);
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        isCompanyAdmin(resource.data.companyId);
    }
    
    // Service Categories collection
    match /serviceCategories/{categoryId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        isCompanyAdmin(resource.data.companyId);
    }
    
    // Services collection
    match /services/{serviceId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        isCompanyAdmin(resource.data.companyId);
        
      // Service staff assignments
      match /staff/{staffId} {
        allow read: if isAuthenticated() && 
          belongsToCompany(get(/databases/$(database)/documents/services/$(serviceId)).data.companyId);
        allow write: if isAuthenticated() && 
          belongsToCompany(get(/databases/$(database)/documents/services/$(serviceId)).data.companyId);
      }
    }
    
    // Positions collection
    match /positions/{positionId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        isCompanyAdmin(resource.data.companyId);
    }
    
    // Staff collection
    match /staff/{staffId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        isCompanyAdmin(resource.data.companyId);
    }
    
    // Resources collection
    match /resources/{resourceId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId);
    }
    
    // Work Schedule collection
    match /workSchedules/{scheduleId} {
      allow read: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId);
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        isCompanyAdmin(resource.data.companyId);
    }
    
    // Client Categories collection
    match /clientCategories/{categoryId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId);
    }
    
    // Appointment Categories collection
    match /appointmentCategories/{categoryId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId);
    }
    
    // Event Categories collection
    match /eventCategories/{categoryId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId);
    }
    
    // Location Settings collection
    match /locationSettings/{settingId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null;
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      allow delete: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId);
    }
    
    // Booking Links collection
    match /bookingLinks/{linkId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      
      // Only authenticated users in the company can create booking links
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null &&
        request.resource.data.createdBy == request.auth.uid;
      
      // Users in the company can update their booking links
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId;
      
      // Only admins can delete booking links
      allow delete: if isAuthenticated() && 
        isCompanyAdmin(resource.data.companyId);
    }
    
    // Appointments collection
    match /appointments/{appointmentId} {
      // Allow read if user has a companyId (for queries) or if the document belongs to their company
      allow read: if isAuthenticated() && 
        (hasCompanyId() || belongsToCompany(resource.data.companyId));
      
      // Only authenticated users in the company can create appointments
      allow create: if isAuthenticated() && 
        belongsToCompany(request.resource.data.companyId) &&
        request.resource.data.companyId != null &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time;
      
      // Users in the company can update appointments
      allow update: if isAuthenticated() && 
        belongsToCompany(resource.data.companyId) &&
        request.resource.data.companyId == resource.data.companyId &&
        request.resource.data.updatedAt == request.time;
      
      // Only admins can delete appointments
      allow delete: if isAuthenticated() && 
        isCompanyAdmin(resource.data.companyId);
    }
    
    // WhatsApp Configurations collection
    match /whatsappConfigs/{configId} {
      // Allow read if user belongs to the company (configId is the companyId)
      allow read: if isAuthenticated() && belongsToCompany(configId);
      
      // Allow create/update if user is an admin of the company
      allow create, update: if isAuthenticated() && 
        isCompanyAdmin(configId) &&
        request.resource.data.companyId == configId;
      
      // Only company admins can delete
      allow delete: if isAuthenticated() && isCompanyAdmin(configId);
    }
    
    // Reminder Configurations collection
    match /reminderConfigs/{configId} {
      // Allow read if user belongs to the company (configId is the companyId)
      allow read: if isAuthenticated() && belongsToCompany(configId);
      
      // Allow create/update if user is an admin of the company
      allow create, update: if isAuthenticated() && 
        isCompanyAdmin(configId) &&
        request.resource.data.companyId == configId;
      
      // Only company admins can delete
      allow delete: if isAuthenticated() && isCompanyAdmin(configId);
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}