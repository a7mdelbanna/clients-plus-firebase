rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function hasCompanyId() {
      return isAuthenticated() && 
        request.auth.token.companyId != null;
    }
    
    function belongsToCompany(companyId) {
      return isAuthenticated() && 
        request.auth.token.companyId == companyId;
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && 
        request.auth.token.isSuperAdmin == true;
    }
    
    function isCompanyAdmin(companyId) {
      return isAuthenticated() && 
        request.auth.token.companyId == companyId &&
        request.auth.token.role == 'ADMIN';
    }
    
    function isCompanyStaff(companyId) {
      return isAuthenticated() && 
        request.auth.token.companyId == companyId &&
        request.auth.token.role in ['ADMIN', 'STAFF'];
    }
    
    function isCompanyUser(companyId) {
      return isAuthenticated() && 
        request.auth.token.companyId == companyId;
    }
    
    // Super Admin collection
    match /superAdmins/{userId} {
      allow read: if isSuperAdmin() && request.auth.uid == userId;
      allow write: if false; // Only through Cloud Functions
    }
    
    // Companies collection and its subcollections
    match /companies/{companyId} {
      allow read: if isSuperAdmin() || isCompanyUser(companyId);
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() || isCompanyAdmin(companyId);
      allow delete: if isSuperAdmin();
      
      // Company-specific subcollections
      match /users/{userId} {
        allow read: if isSuperAdmin() || isCompanyUser(companyId);
        allow write: if isSuperAdmin() || isCompanyAdmin(companyId);
      }
      
      match /branches/{branchId} {
        allow read: if isSuperAdmin() || isCompanyUser(companyId);
        allow write: if isSuperAdmin() || isCompanyAdmin(companyId);
      }
      
      match /settings/{settingId} {
        allow read: if isSuperAdmin() || isCompanyUser(companyId);
        allow create: if isSuperAdmin() || isCompanyAdmin(companyId);
        allow update: if isSuperAdmin() || isCompanyAdmin(companyId);
        allow delete: if isSuperAdmin() || isCompanyAdmin(companyId);
      }
      
      match /locationSettings/{settingId} {
        allow read: if true; // Public for booking
        allow create: if isSuperAdmin() || isCompanyAdmin(companyId);
        allow update: if isSuperAdmin() || isCompanyAdmin(companyId);
        allow delete: if isSuperAdmin() || isCompanyAdmin(companyId);
      }
      
      match /whatsappMessages/{messageId} {
        allow read: if isSuperAdmin() || isCompanyStaff(companyId);
        allow create: if isSuperAdmin() || isCompanyStaff(companyId);
        allow update: if isSuperAdmin() || isCompanyStaff(companyId);
        allow delete: if isSuperAdmin() || isCompanyStaff(companyId);
      }
    }
    
    // Top-level collections (all company data is filtered by companyId field)
    
    // Clients collection
    match /clients/{clientId} {
      allow read: if isSuperAdmin() || hasCompanyId();
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    // Staff/Employees collection
    match /staff/{staffId} {
      allow read: if isSuperAdmin() || hasCompanyId();
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    // Services collection
    match /services/{serviceId} {
      allow read: if true; // Public for booking
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    // Appointments collection
    match /appointments/{appointmentId} {
      allow read: if isSuperAdmin() || hasCompanyId() || isAuthenticated();
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId) ||
        isAuthenticated();
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId) ||
        (isAuthenticated() && resource.data.clientId == request.auth.uid);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    // Resources collection
    match /resources/{resourceId} {
      allow read: if isSuperAdmin() || hasCompanyId();
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    // Positions collection
    match /positions/{positionId} {
      allow read: if isSuperAdmin() || hasCompanyId();
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    // Category collections
    match /serviceCategories/{categoryId} {
      allow read: if true; // Public for booking
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    match /clientCategories/{categoryId} {
      allow read: if isSuperAdmin() || hasCompanyId();
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    match /appointmentCategories/{categoryId} {
      allow read: if isSuperAdmin() || hasCompanyId();
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    match /eventCategories/{categoryId} {
      allow read: if isSuperAdmin() || hasCompanyId();
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    // WhatsApp configurations (top-level) - simplified rule
    match /whatsappConfigs/{configId} {
      allow read, write: if isAuthenticated() && hasCompanyId();
    }
    
    // Reminder configurations (top-level)
    match /reminderConfigs/{configId} {
      allow read: if isSuperAdmin() || hasCompanyId();
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    // Reminder logs (top-level)
    match /reminderLogs/{logId} {
      allow read: if isSuperAdmin() || hasCompanyId();
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
    
    // Location settings (top-level) - Public read for booking
    match /locationSettings/{settingId} {
      allow read: if true; // Public for booking pages
      allow create: if isSuperAdmin() || 
        (hasCompanyId() && request.resource.data.companyId == request.auth.token.companyId);
      allow update: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
      allow delete: if isSuperAdmin() || 
        (hasCompanyId() && resource.data.companyId == request.auth.token.companyId);
    }
  }
}